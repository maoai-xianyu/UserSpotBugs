import com.github.spotbugs.snom.SpotBugsTask

project.extensions.extraProperties.set('SpotBugsTask', SpotBugsTask)

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.spotbugs'

// 使用 spotbugs.gradle 需要设置 project.extensions.extraProperties.set('SpotBugsTask', SpotBugsTask)
apply from: '../app/spotbugs.gradle'

// 不适用可以不用哦



android {

    compileSdk 32

    defaultConfig {
        applicationId "com.coding.events.userspotbugs"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}


// 写在 app 项目下的  build.gradle
/*

def qualityConfigDir = "$project.rootDir/config/quality"
def reportsConfigDir = "$project.buildDir/reports"

spotbugs {
    toolVersion = '4.7.1'
    //忽略失败，如果检测到bug,task会执行失败，设置为true会让task继续执行
    ignoreFailures = false
    showStackTraces = true
    showProgress = false
    // 等级分为 min default max
    effort = "min"
    // 检测bug的等级 low  medium  high 等级越高检测越严重
    reportLevel = "medium"

    // 引入过滤
    //includeFilter
    // excludeFilter 排除过滤
    excludeFilter = new File("$qualityConfigDir/spotbugs/android-exclude-filter.xml")
    println "-----${new File("$qualityConfigDir/spotbugs/android-exclude-filter.xml").exists()}"
    maxHeapSize = '512m'
}


task spotbugsMain(type: SpotBugsTask) {
    dependsOn 'assembleDebug'
    group = "spotbugs"
    //classes = files("$projectDir.absolutePath/build/intermediates/app_classes/debug")

    classes = files("${project.buildDir}/intermediates/javac") + files("${project.buildDir}/tmp/kotlin-classes")

    println "-----$projectDir.absolutePath"

    reports {

        xml.configure {
            required = true
            destination = file("$reportsConfigDir/spotbugs/spotbugs.xml")
        }

        html.configure {
            required = true
            outputLocation = file("$reportsConfigDir/spotbugs/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}
*/
